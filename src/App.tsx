import { FabricJSCanvas, useFabricJSEditor } from "fabricjs-react";
import { fabric } from "fabric";
import "./App.css";
import React, { createRef, useEffect, useMemo, useRef, useState } from "react";
import Design from "./types/design";
import lightenColorHex from "./utils/lightenColorHex";

const canvasData = [
  {
    name: "Bahu Kiri",
    clipPath:
      "polygon(14.379899978637695% 10.290200233459473%, 13.909899711608887% 11.02754020690918%, 13.439901351928711% 11.76487922668457%, 12.969902992248535% 12.502220153808594%, 12.49990463256836% 13.239561080932617%, 12.029905319213867% 13.97690200805664%, 11.559907913208008% 14.714242935180664%, 11.089909553527832% 15.451583862304688%, 10.61991024017334% 16.18892478942871%, 10.14991283416748% 16.9262638092041%, 9.679914474487305% 17.663604736328125%, 9.209916114807129% 18.40094566345215%, 8.739916801452637% 19.138286590576172%, 8.269919395446777% 19.875625610351562%, 7.799920558929443% 20.61296844482422%, 7.329922676086426% 21.35030746459961%, 6.859923839569092% 22.087648391723633%, 6.389925479888916% 22.824989318847656%, 5.91992712020874% 23.56233024597168%, 5.449928283691406% 24.299671173095703%, 4.979930877685547% 25.037010192871094%, 4.509932041168213% 25.774351119995117%, 4.039933204650879% 26.51169204711914%, 3.5699357986450195% 27.24903106689453%, 3.0999369621276855% 27.986373901367188%, 2.6299383640289307% 28.72371482849121%, 2.159940719604492% 29.4610538482666%, 1.6899420022964478% 30.198394775390625%, 1.2199432849884033% 30.93573570251465%, 0.7499446272850037% 31.673076629638672%, 0.2799469828605652% 32.41041564941406%, 0.3036479949951172% 33.03074645996094%, 1.0545730590820312% 33.478721618652344%, 1.8054962158203125% 33.92669677734375%, 2.5564212799072266% 34.374671936035156%, 3.3073463439941406% 34.82264709472656%, 4.058272361755371% 35.27062225341797%, 4.809197425842285% 35.718597412109375%, 5.560122489929199% 36.16657257080078%, 6.311044692993164% 36.61454772949219%, 7.061969757080078% 37.062522888183594%, 7.812894821166992% 37.510498046875%, 8.563820838928223% 37.958473205566406%, 9.314745903015137% 38.40644836425781%, 10.06567096710205% 38.85442352294922%, 10.816596984863281% 39.302398681640625%, 11.56751823425293% 39.75037384033203%, 12.318443298339844% 40.19834899902344%, 13.069368362426758% 40.646324157714844%, 13.820294380187988% 41.09429931640625%, 14.571219444274902% 41.542274475097656%, 15.322144508361816% 41.99024963378906%, 16.07306671142578% 42.4382209777832%, 16.823991775512695% 42.88619613647461%, 17.492338180541992% 42.8486442565918%, 18.052940368652344% 42.1776008605957%, 18.613540649414062% 41.506561279296875%, 19.17414093017578% 40.83551788330078%, 19.734743118286133% 40.16447448730469%, 20.29534149169922% 39.493438720703125%, 20.855941772460938% 38.82239532470703%, 21.41654396057129% 38.1513557434082%, 21.862289428710938% 37.41834259033203%, 22.11532211303711% 36.581356048583984%, 22.36835479736328% 35.7443733215332%, 22.621387481689453% 34.907386779785156%, 22.874420166015625% 34.070404052734375%, 23.127452850341797% 33.23341751098633%, 23.38048553466797% 32.39643096923828%, 23.482799530029297% 31.537166595458984%, 23.482799530029297% 30.662769317626953%, 23.482799530029297% 29.788372039794922%, 23.482799530029297% 28.91397476196289%, 23.482799530029297% 28.039581298828125%, 23.482799530029297% 27.165180206298828%, 23.482799530029297% 26.290782928466797%, 23.45478630065918% 25.41861343383789%, 23.316640853881836% 24.555206298828125%, 23.178497314453125% 23.691789627075195%, 23.04035186767578% 22.8283748626709%, 22.902206420898438% 21.96495819091797%, 22.764060974121094% 21.101543426513672%, 22.62591552734375% 20.238126754760742%, 22.487770080566406% 19.374711990356445%, 22.102481842041016% 18.627567291259766%, 21.525365829467773% 17.970674514770508%, 20.94824981689453% 17.31378173828125%, 20.371135711669922% 16.656888961791992%, 19.79401969909668% 15.999996185302734%, 19.216903686523438% 15.343103408813477%, 18.62075424194336% 14.703704833984375%, 18.014921188354492% 14.073209762573242%, 17.40908432006836% 13.442708015441895%, 16.803247451782227% 12.812206268310547%, 16.197410583496094% 12.1817045211792%, 15.591573715209961% 11.551202774047852%, 14.985736846923828% 10.92070198059082%, 14.379899978637695% 10.290200233459473%)",
  },
  {
    name: "Badan",
    clipPath:
      "polygon(34.04650115966797% 0.7576389908790588%, 36.823486328125% 1.8214077949523926%, 38.64715576171875% 4.581557750701904%, 40.52338790893555% 7.299956798553467%, 43.48662185668945% 8.753194808959961%, 46.495121002197266% 10.129115104675293%, 49.60334396362305% 10.941325187683105%, 52.70716094970703% 9.796548843383789%, 55.81081008911133% 8.651313781738281%, 58.90165710449219% 7.476900100708008%, 60.801918029785156% 4.806752681732178%, 62.518802642822266% 1.978946566581726%, 65.22032928466797% 0.7101066708564758%, 68.21640014648438% 2.11262845993042%, 71.21054077148438% 3.51951265335083%, 74.20468139648438% 4.926397323608398%, 77.19882202148438% 6.333279609680176%, 80.1929702758789% 7.740164279937744%, 83.18604278564453% 9.149188995361328%, 83.93661499023438% 11.994912147521973%, 81.67716217041016% 14.408332824707031%, 79.56940460205078% 16.922924041748047%, 78.71586608886719% 20.11910629272461%, 77.86344909667969% 23.31560516357422%, 77.04901885986328% 26.51957893371582%, 77.0448989868164% 29.827693939208984%, 77.06310272216797% 33.13504409790039%, 77.8532943725586% 36.347023010253906%, 78.27397155761719% 39.609886169433594%, 78.35305786132812% 42.917144775390625%, 78.43214416503906% 46.224403381347656%, 78.51123046875% 49.531654357910156%, 78.59031677246094% 52.83891296386719%, 78.66940307617188% 56.14617156982422%, 78.74848937988281% 59.45343017578125%, 78.82757568359375% 62.760684967041016%, 78.90666198730469% 66.06794738769531%, 78.98574829101562% 69.37519836425781%, 79.06483459472656% 72.68246459960938%, 79.1439208984375% 75.98971557617188%, 79.22300720214844% 79.29698181152344%, 79.30208587646484% 82.60423278808594%, 79.38117218017578% 85.91148376464844%, 79.46025848388672% 89.21875%, 79.53934478759766% 92.5260009765625%, 79.6184310913086% 95.83326721191406%, 78.17784881591797% 98.47416687011719%, 74.87650299072266% 98.54878997802734%, 71.56829071044922% 98.54878997802734%, 68.26009368896484% 98.54878997802734%, 64.9518814086914% 98.54878997802734%, 61.64368438720703% 98.54878997802734%, 58.335487365722656% 98.54878997802734%, 55.02727508544922% 98.54878997802734%, 51.719078063964844% 98.54878997802734%, 48.410865783691406% 98.54878997802734%, 45.10266876220703% 98.54879760742188%, 41.794471740722656% 98.54879760742188%, 38.48625946044922% 98.54879760742188%, 35.178062438964844% 98.54879760742188%, 31.869848251342773% 98.54879760742188%, 28.5616512298584% 98.54879760742188%, 25.253454208374023% 98.54879760742188%, 21.94525146484375% 98.54837036132812%, 19.983020782470703% 96.34992980957031%, 20.076475143432617% 93.04305267333984%, 20.16992950439453% 89.73616027832031%, 20.263383865356445% 86.42929077148438%, 20.35683822631836% 83.12239074707031%, 20.450292587280273% 79.81552124023438%, 20.543746948242188% 76.50863647460938%, 20.6372013092041% 73.20175170898438%, 20.730655670166016% 69.89486694335938%, 20.824111938476562% 66.58798217773438%, 20.917564392089844% 63.281105041503906%, 21.011018753051758% 59.97422790527344%, 21.104473114013672% 56.667335510253906%, 21.197927474975586% 53.36045837402344%, 21.2913818359375% 50.05358123779297%, 21.384836196899414% 46.7467041015625%, 21.478290557861328% 43.439796447753906%, 21.571744918823242% 40.13291931152344%, 21.79507064819336% 36.837921142578125%, 22.302770614624023% 33.56891632080078%, 22.67378044128418% 30.28205108642578%, 23.02266502380371% 26.992271423339844%, 22.261165618896484% 23.80428123474121%, 21.252925872802734% 20.65346908569336%, 20.244686126708984% 17.502656936645508%, 18.395750045776367% 14.82381534576416%, 16.16263198852539% 12.38300609588623%, 16.202980041503906% 9.43593978881836%, 19.14301872253418% 7.933391094207764%, 22.12371063232422% 6.49824333190918%, 25.104400634765625% 5.063095569610596%, 28.085119247436523% 3.627934455871582%, 31.065811157226562% 2.192786693572998%, 34.04650115966797% 0.7576389908790588%)",
  },
  {
    name: "Bahu Kanan",
    clipPath:
      "polygon(85.62010192871094% 10.290200233459473%, 86.09010314941406% 11.02754020690918%, 86.56009674072266% 11.76487922668457%, 87.03009796142578% 12.502220153808594%, 87.50009155273438% 13.239561080932617%, 87.9700927734375% 13.97690200805664%, 88.44009399414062% 14.714242935180664%, 88.91008758544922% 15.451583862304688%, 89.38008880615234% 16.18892478942871%, 89.85009002685547% 16.9262638092041%, 90.32008361816406% 17.663604736328125%, 90.79008483886719% 18.40094566345215%, 91.26008605957031% 19.138286590576172%, 91.7300796508789% 19.875625610351562%, 92.20008087158203% 20.61296844482422%, 92.67007446289062% 21.35030746459961%, 93.14007568359375% 22.087648391723633%, 93.61007690429688% 22.824989318847656%, 94.08007049560547% 23.56233024597168%, 94.5500717163086% 24.299671173095703%, 95.02006530761719% 25.037010192871094%, 95.49006652832031% 25.774351119995117%, 95.96006774902344% 26.51169204711914%, 96.43006134033203% 27.24903106689453%, 96.90006256103516% 27.986373901367188%, 97.37006378173828% 28.72371482849121%, 97.84005737304688% 29.4610538482666%, 98.31005859375% 30.198394775390625%, 98.78005981445312% 30.93573570251465%, 99.25005340576172% 31.673076629638672%, 99.72005462646484% 32.41041564941406%, 99.69635009765625% 33.0307502746582%, 98.94542694091797% 33.47872543334961%, 98.19450378417969% 33.92669677734375%, 97.4435806274414% 34.374671936035156%, 96.69265747070312% 34.82264709472656%, 95.94172668457031% 35.27062225341797%, 95.19080352783203% 35.718597412109375%, 94.43988037109375% 36.16657257080078%, 93.68895721435547% 36.61454772949219%, 92.93803405761719% 37.062522888183594%, 92.18710327148438% 37.510498046875%, 91.4361801147461% 37.958473205566406%, 90.68525695800781% 38.40644836425781%, 89.934326171875% 38.85442352294922%, 89.18340301513672% 39.302398681640625%, 88.43247985839844% 39.75037384033203%, 87.68155670166016% 40.19834899902344%, 86.93063354492188% 40.646324157714844%, 86.17970275878906% 41.09429931640625%, 85.42877960205078% 41.542274475097656%, 84.6778564453125% 41.99024963378906%, 83.92693328857422% 42.4382209777832%, 83.17601013183594% 42.88619613647461%, 82.50765991210938% 42.8486442565918%, 81.94705963134766% 42.1776008605957%, 81.38645935058594% 41.506561279296875%, 80.82585906982422% 40.83551788330078%, 80.2652587890625% 40.16447448730469%, 79.70465850830078% 39.493438720703125%, 79.14405822753906% 38.82239532470703%, 78.58345794677734% 38.1513557434082%, 78.13771057128906% 37.41834259033203%, 77.88467407226562% 36.581356048583984%, 77.63164520263672% 35.74436950683594%, 77.37860870361328% 34.907386779785156%, 77.12557983398438% 34.070404052734375%, 76.87254333496094% 33.23341751098633%, 76.6195068359375% 32.39643096923828%, 76.51719665527344% 31.537166595458984%, 76.51719665527344% 30.662769317626953%, 76.51719665527344% 29.788372039794922%, 76.51719665527344% 28.91397476196289%, 76.51719665527344% 28.039581298828125%, 76.51719665527344% 27.165180206298828%, 76.51719665527344% 26.290782928466797%, 76.54521179199219% 25.41861343383789%, 76.68335723876953% 24.555204391479492%, 76.82150268554688% 23.691789627075195%, 76.95964813232422% 22.828372955322266%, 77.09779357910156% 21.96495819091797%, 77.2359390258789% 21.101543426513672%, 77.37408447265625% 20.238126754760742%, 77.5122299194336% 19.374711990356445%, 77.89752197265625% 18.627567291259766%, 78.4746322631836% 17.970674514770508%, 79.05175018310547% 17.31378173828125%, 79.62886810302734% 16.656888961791992%, 80.20597839355469% 15.999996185302734%, 80.78309631347656% 15.343103408813477%, 81.3792495727539% 14.703704833984375%, 81.98507690429688% 14.073208808898926%, 82.5909194946289% 13.442707061767578%, 83.1967544555664% 12.812206268310547%, 83.8025894165039% 12.1817045211792%, 84.4084243774414% 11.551202774047852%, 85.01426696777344% 10.92070198059082%, 85.62010192871094% 10.290200233459473%)",
  },
];

export default function App() {
  const fabrics = canvasData.map(() => useFabricJSEditor());
  const [selectedCanvas, setSelectedCanvas] = useState(0);
  const [designs, setDesigns] = useState<Design[]>([]);
  const [color, setColor] = useState<string>("#000000");
  const selectedObjects = useMemo(
    () => fabrics.map((e) => e.editor?.canvas.getActiveObject()),
    [fabrics]
  );

  const handleAddImage = () => {
    fabric.Image.fromURL("https://picsum.photos/seed/picsum/200", (image) => {
      image.scaleToWidth(400);
      image.scaleToHeight(400);
      fabrics[selectedCanvas].editor?.canvas.add(image);
    });
  };
  const handleRemoveObject = () => {
    const selectedObject = selectedObjects[selectedCanvas];
    if (selectedObject)
      fabrics[selectedCanvas].editor?.canvas.remove(selectedObject);
  };
  const handleClearSelection = () => {
    fabrics.forEach((e) => e.editor?.canvas.discardActiveObject().renderAll());
  };
  const handleReset = () => {
    fabrics.forEach((e) => e.editor?.canvas.clear());
  };

  const changeDesign = (design: Design) => {
    fabrics.forEach((e, i) =>
      e.editor?.canvas.loadFromJSON(design.data[i], () => {})
    );
  };
  const handleChangeColor = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log(e.target.value);

    setColor(e.target.value);
  };
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const title = (e.target as any)[0].value;
    const data = fabrics.map((e) => e.editor?.canvas.toJSON()!);

    setDesigns((state) => {
      const newState = [
        ...state,
        {
          title,
          data,
        },
      ];
      localStorage.setItem("designs", JSON.stringify(newState));
      return newState;
    });

    (e.target as HTMLFormElement).reset();
  };
  const handleDeleteAllDesigns = () => {
    localStorage.setItem("designs", JSON.stringify([]));

    setDesigns([]);
  };

  const handleChangeSelectedCanvas = (index: number) => () => {
    handleClearSelection();
    setSelectedCanvas(index);
  };

  useEffect(() => {
    const savedDesigns = localStorage.getItem("designs");
    if (savedDesigns) {
      setDesigns(JSON.parse(savedDesigns));
    }

    fabrics.forEach((e) =>
      e.editor?.canvas.on("selection:created", (d) => {
        if (d.target?.type == "activeSelection")
          e.editor?.canvas.discardActiveObject();
      })
    );
  }, []);

  return (
    <div className="App">
      <h1>FabricJS React Sample</h1>
      {/* <button onClick={handleAddCircle}>Add circle</button>
      <button onClick={handleAddRectangle}>Add Rectangle</button> */}
      <button onClick={handleAddImage}>Add Image</button>
      <button onClick={handleReset}>Reset</button>
      <form onSubmit={handleSubmit}>
        <input type="text" name="title" placeholder="Design title here..." />
        <input type="submit" value="Save" />
      </form>
      <br />
      <label htmlFor="baseColor">Base Color</label>
      <input
        id="baseColor"
        type="color"
        placeholder="Base Color"
        value={color}
        onChange={handleChangeColor}
      />
      <br />
      {designs.length > 0 && (
        <div>
          <h2>Saved Designs</h2>
          <button
            onClick={handleDeleteAllDesigns}
            style={{ display: "block", margin: "auto" }}
          >
            Delete all designs
          </button>
          {designs.map((design, index) => (
            <div
              key={`${design.title} ${index}`}
              style={{
                cursor: "pointer",
                display: "inline-block",
                border: "1px solid black",
                margin: "4px",
                padding: "4px",
              }}
              onClick={() => changeDesign(design)}
            >
              <h3>{design.title}</h3>
            </div>
          ))}
        </div>
      )}
      <button
        disabled={!selectedObjects[selectedCanvas]}
        onClick={handleRemoveObject}
      >
        Remove Selected
      </button>
      <br />
      <p>Selected part : {canvasData[selectedCanvas].name}</p>
      {canvasData.map((e, i) => (
        <button onClick={handleChangeSelectedCanvas(i)}>{e.name}</button>
      ))}
      <br />
      <div className="canvas">
        <div className="canvas-background" onClick={handleClearSelection}></div>
        {fabrics.map((e, i) => (
          <div
            key={i}
            className="canvas-foreground"
            style={{
              clipPath: canvasData[i].clipPath,
              backgroundColor:
                selectedCanvas === i ? lightenColorHex(color) : color,
            }}
          >
            <FabricJSCanvas onReady={e.onReady} />
          </div>
        ))}
      </div>
    </div>
  );
}
